#ifndef __STATUS_PAGE_H__
#define __STATUS_PAGE_H__

/* HTML content for status page - embedded as string constant */
static const char status_page_html[] =
    "<!DOCTYPE html>\n"
    "<html lang=\"en\">\n"
    "<head>\n"
    "<meta charset=\"UTF-8\">\n"
    "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
    "<title>rtp2httpd Status</title>\n"
    "<style>\n"
    "/* CSS Variables for Light Mode (Default) */\n"
    ":root {\n"
    "  --bg-primary: #e8eaed;\n"
    "  --bg-secondary: #f8f9fa;\n"
    "  --bg-card: #ffffff;\n"
    "  --bg-header: #2c3e50;\n"
    "  --bg-table-header: #f1f3f4;\n"
    "  --bg-hover: #f1f3f4;\n"
    "  --bg-log: #1e1e1e;\n"
    "  --text-primary: #2c3e50;\n"
    "  --text-secondary: #666666;\n"
    "  --text-muted: #999999;\n"
    "  --text-header: #ffffff;\n"
    "  --text-log: #d4d4d4;\n"
    "  --border-color: #dee2e6;\n"
    "  --border-color-strong: #dee2e6;\n"
    "  --shadow: 0 2px 8px rgba(0,0,0,0.08);\n"
    "  --shadow-hover: 0 4px 12px rgba(0,0,0,0.12);\n"
    "  --shadow-card: 0 1px 3px rgba(0,0,0,0.12);\n"
    "}\n"
    "\n"
    "/* Dark Mode Variables */\n"
    "@media (prefers-color-scheme: dark) {\n"
    "  :root {\n"
    "    --bg-primary: #0f0f0f;\n"
    "    --bg-secondary: #1a1a1a;\n"
    "    --bg-card: #2d2d2d;\n"
    "    --bg-header: #1e3a4f;\n"
    "    --bg-table-header: #242424;\n"
    "    --bg-hover: #3a3a3a;\n"
    "    --bg-log: #0d0d0d;\n"
    "    --text-primary: #e0e0e0;\n"
    "    --text-secondary: #b0b0b0;\n"
    "    --text-muted: #808080;\n"
    "    --text-header: #ffffff;\n"
    "    --text-log: #d4d4d4;\n"
    "    --border-color: #404040;\n"
    "    --border-color-strong: #505050;\n"
    "    --shadow: 0 2px 8px rgba(0,0,0,0.4);\n"
    "    --shadow-hover: 0 4px 12px rgba(0,0,0,0.5);\n"
    "    --shadow-card: 0 1px 3px rgba(0,0,0,0.3);\n"
    "  }\n"
    "}\n"
    "\n"
    "/* Base Styles */\n"
    "* { margin: 0; padding: 0; box-sizing: border-box; }\n"
    "\n"
    "body {\n"
    "  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n"
    "  background: var(--bg-primary);\n"
    "  color: var(--text-primary);\n"
    "  padding: 20px;\n"
    "  line-height: 1.6;\n"
    "  transition: background-color 0.3s ease, color 0.3s ease;\n"
    "}\n"
    "\n"
    "/* Header Styles */\n"
    "header {\n"
    "  background: var(--bg-header);\n"
    "  color: var(--text-header);\n"
    "  padding: 24px;\n"
    "  border-radius: 12px;\n"
    "  margin-bottom: 24px;\n"
    "  box-shadow: var(--shadow);\n"
    "  transition: all 0.3s ease;\n"
    "}\n"
    "\n"
    "h1 {\n"
    "  font-size: 28px;\n"
    "  font-weight: 600;\n"
    "  margin-bottom: 12px;\n"
    "  letter-spacing: -0.5px;\n"
    "}\n"
    "\n"
    ".server-info {\n"
    "  display: flex;\n"
    "  gap: 24px;\n"
    "  font-size: 14px;\n"
    "  opacity: 0.95;\n"
    "  flex-wrap: wrap;\n"
    "}\n"
    "\n"
    "/* Stats Grid */\n"
    ".stats-grid {\n"
    "  display: grid;\n"
    "  grid-template-columns: repeat(4, 1fr);\n"
    "  gap: 16px;\n"
    "  margin-bottom: 24px;\n"
    "}\n"
    "\n"
    ".stat-card {\n"
    "  background: var(--bg-card);\n"
    "  padding: 24px;\n"
    "  border-radius: 12px;\n"
    "  box-shadow: var(--shadow-card);\n"
    "  border: 1px solid var(--border-color);\n"
    "  transition: all 0.3s ease;\n"
    "}\n"
    "\n"
    ".stat-card:hover {\n"
    "  transform: translateY(-2px);\n"
    "  box-shadow: var(--shadow-hover);\n"
    "}\n"
    "\n"
    ".stat-label {\n"
    "  font-size: 11px;\n"
    "  color: var(--text-secondary);\n"
    "  text-transform: uppercase;\n"
    "  letter-spacing: 0.5px;\n"
    "  margin-bottom: 8px;\n"
    "  font-weight: 600;\n"
    "}\n"
    "\n"
    ".stat-value {\n"
    "  font-size: 32px;\n"
    "  font-weight: 700;\n"
    "  color: var(--text-primary);\n"
    "  line-height: 1.2;\n"
    "}\n"
    "\n"
    "/* Section Styles */\n"
    ".section {\n"
    "  background: var(--bg-secondary);\n"
    "  padding: 24px;\n"
    "  border-radius: 12px;\n"
    "  box-shadow: var(--shadow);\n"
    "  margin-bottom: 24px;\n"
    "  transition: all 0.3s ease;\n"
    "}\n"
    "\n"
    ".section-header {\n"
    "  display: flex;\n"
    "  justify-content: space-between;\n"
    "  align-items: center;\n"
    "  margin-bottom: 20px;\n"
    "  flex-wrap: wrap;\n"
    "  gap: 12px;\n"
    "}\n"
    "\n"
    "h2 {\n"
    "  font-size: 20px;\n"
    "  font-weight: 600;\n"
    "  color: var(--text-primary);\n"
    "  letter-spacing: -0.3px;\n"
    "}\n"
    "\n"
    "/* Clients Container with Scrolling */\n"
    "#clients-container {\n"
    "  overflow: auto;\n"
    "  max-height: 600px;\n"
    "  border-radius: 8px;\n"
    "}\n"
    "\n"
    "/* Table Styles */\n"
    "table {\n"
    "  width: 100%;\n"
    "  border-collapse: collapse;\n"
    "  min-width: 800px;\n"
    "}\n"
    "\n"
    "th {\n"
    "  text-align: left;\n"
    "  padding: 14px 12px;\n"
    "  background: var(--bg-table-header);\n"
    "  font-size: 11px;\n"
    "  text-transform: uppercase;\n"
    "  color: var(--text-secondary);\n"
    "  border-bottom: 2px solid var(--border-color-strong);\n"
    "  font-weight: 700;\n"
    "  letter-spacing: 0.5px;\n"
    "  position: sticky;\n"
    "  top: 0;\n"
    "  z-index: 10;\n"
    "}\n"
    "\n"
    "td {\n"
    "  padding: 14px 12px;\n"
    "  border-bottom: 1px solid var(--border-color);\n"
    "  font-size: 14px;\n"
    "}\n"
    "\n"
    "tr:hover {\n"
    "  background: var(--bg-hover);\n"
    "  transition: background-color 0.2s ease;\n"
    "}\n"
    "\n"
    "/* State Badges */\n"
    ".state-badge {\n"
    "  display: inline-block;\n"
    "  padding: 5px 10px;\n"
    "  border-radius: 6px;\n"
    "  font-size: 11px;\n"
    "  font-weight: 700;\n"
    "  text-transform: uppercase;\n"
    "  letter-spacing: 0.3px;\n"
    "}\n"
    "\n"
    ".state-connecting { background: #ffc107; color: #000; }\n"
    ".state-fcc { background: #17a2b8; color: white; }\n"
    ".state-rtsp { background: #007bff; color: white; }\n"
    ".state-active { background: #28a745; color: white; }\n"
    ".state-error { background: #dc3545; color: white; }\n"
    ".state-disconnected { background: #6c757d; color: white; }\n"
    "\n"
    ".client-row-disconnected {\n"
    "  opacity: 0.5;\n"
    "  background: var(--bg-hover);\n"
    "}\n"
    "\n"
    "/* Button Styles */\n"
    ".btn {\n"
    "  padding: 8px 16px;\n"
    "  border: none;\n"
    "  border-radius: 6px;\n"
    "  cursor: pointer;\n"
    "  font-size: 13px;\n"
    "  font-weight: 600;\n"
    "  transition: all 0.2s ease;\n"
    "  letter-spacing: 0.3px;\n"
    "}\n"
    "\n"
    ".btn-danger {\n"
    "  background: #dc3545;\n"
    "  color: white;\n"
    "}\n"
    "\n"
    ".btn-danger:hover {\n"
    "  background: #c82333;\n"
    "  transform: translateY(-1px);\n"
    "  box-shadow: 0 2px 4px rgba(220, 53, 69, 0.3);\n"
    "}\n"
    "\n"
    ".btn-secondary {\n"
    "  background: #6c757d;\n"
    "  color: white;\n"
    "}\n"
    "\n"
    ".btn-secondary:hover {\n"
    "  background: #5a6268;\n"
    "  transform: translateY(-1px);\n"
    "  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.3);\n"
    "}\n"
    "\n"
    "/* Log Controls */\n"
    ".log-controls {\n"
    "  display: flex;\n"
    "  gap: 12px;\n"
    "  align-items: center;\n"
    "  margin-bottom: 16px;\n"
    "  flex-wrap: wrap;\n"
    "}\n"
    "\n"
    ".log-controls label {\n"
    "  font-size: 14px;\n"
    "  color: var(--text-secondary);\n"
    "  font-weight: 500;\n"
    "}\n"
    "\n"
    ".log-controls select {\n"
    "  padding: 8px 12px;\n"
    "  border: 1px solid var(--border-color);\n"
    "  border-radius: 6px;\n"
    "  font-size: 14px;\n"
    "  background: var(--bg-secondary);\n"
    "  color: var(--text-primary);\n"
    "  transition: all 0.2s ease;\n"
    "}\n"
    "\n"
    ".log-controls select:focus {\n"
    "  outline: none;\n"
    "  border-color: #007bff;\n"
    "  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);\n"
    "}\n"
    "\n"
    "/* Log Container */\n"
    ".log-container {\n"
    "  background: var(--bg-log);\n"
    "  color: var(--text-log);\n"
    "  padding: 16px;\n"
    "  border-radius: 8px;\n"
    "  max-height: 400px;\n"
    "  overflow-y: auto;\n"
    "  font-family: 'SF Mono', 'Monaco', 'Inconsolata', 'Fira Code', 'Courier New', monospace;\n"
    "  font-size: 13px;\n"
    "  line-height: 1.5;\n"
    "  contain: layout style paint;\n"
    "  will-change: scroll-position;\n"
    "}\n"
    "\n"
    ".log-entry {\n"
    "  margin-bottom: 6px;\n"
    "  word-wrap: break-word;\n"
    "  white-space: pre-wrap;\n"
    "  content-visibility: auto;\n"
    "  contain-intrinsic-size: auto 20px;\n"
    "}\n"
    "\n"
    ".log-timestamp { color: #858585; }\n"
    ".log-level { font-weight: bold; margin: 0 8px; }\n"
    ".log-fatal { color: #f44336; }\n"
    ".log-error { color: #ff9800; }\n"
    ".log-info { color: #4caf50; }\n"
    ".log-debug { color: #2196f3; }\n"
    "\n"
    "/* Connection Status */\n"
    ".connection-status {\n"
    "  display: inline-block;\n"
    "  width: 10px;\n"
    "  height: 10px;\n"
    "  border-radius: 50%;\n"
    "  margin-right: 8px;\n"
    "  animation: pulse 2s ease-in-out infinite;\n"
    "}\n"
    "\n"
    ".connection-status.connected { background: #28a745; }\n"
    ".connection-status.disconnected { background: #dc3545; animation: none; }\n"
    "\n"
    "@keyframes pulse {\n"
    "  0%, 100% { opacity: 1; }\n"
    "  50% { opacity: 0.5; }\n"
    "}\n"
    "\n"
    "/* Empty State */\n"
    ".empty-state {\n"
    "  text-align: center;\n"
    "  padding: 60px 20px;\n"
    "  color: var(--text-muted);\n"
    "  font-size: 16px;\n"
    "}\n"
    "\n"
    "/* Language Selector */\n"
    ".lang-selector {\n"
    "  display: inline-block;\n"
    "  position: relative;\n"
    "}\n"
    "\n"
    ".lang-selector select {\n"
    "  padding: 6px 32px 6px 12px;\n"
    "  border: 1px solid rgba(255, 255, 255, 0.3);\n"
    "  border-radius: 6px;\n"
    "  font-size: 13px;\n"
    "  background-color: rgba(255, 255, 255, 0.1);\n"
    "  background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"0 0 12 12\"><path fill=\"white\" d=\"M6 9L1 4h10z\"/></svg>');\n"
    "  background-repeat: no-repeat;\n"
    "  background-position: right 8px center;\n"
    "  color: var(--text-header);\n"
    "  cursor: pointer;\n"
    "  transition: all 0.2s ease;\n"
    "  appearance: none;\n"
    "  -webkit-appearance: none;\n"
    "  -moz-appearance: none;\n"
    "}\n"
    "\n"
    ".lang-selector select:hover {\n"
    "  background-color: rgba(255, 255, 255, 0.15);\n"
    "  border-color: rgba(255, 255, 255, 0.5);\n"
    "}\n"
    "\n"
    ".lang-selector select:focus {\n"
    "  outline: none;\n"
    "  border-color: rgba(255, 255, 255, 0.6);\n"
    "  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.1);\n"
    "}\n"
    "\n"
    "/* Responsive Design for Medium Screens (Tablets and smaller desktops) */\n"
    "@media (max-width: 1024px) {\n"
    "  .stats-grid {\n"
    "    grid-template-columns: repeat(2, 1fr);\n"
    "  }\n"
    "}\n"
    "\n"
    "/* Responsive Design for Small Screens */\n"
    "@media (max-width: 768px) {\n"
    "  body { padding: 12px; }\n"
    "  \n"
    "  header { padding: 16px; margin-bottom: 16px; }\n"
    "  \n"
    "  h1 { font-size: 22px; margin-bottom: 10px; }\n"
    "  \n"
    "  .server-info {\n"
    "    flex-direction: column;\n"
    "    gap: 8px;\n"
    "    font-size: 13px;\n"
    "  }\n"
    "  \n"
    "  .stats-grid {\n"
    "    grid-template-columns: repeat(2, 1fr);\n"
    "    gap: 12px;\n"
    "    margin-bottom: 16px;\n"
    "  }\n"
    "  \n"
    "  .stat-card { padding: 16px; }\n"
    "  \n"
    "  .stat-label { font-size: 10px; }\n"
    "  \n"
    "  .stat-value { font-size: 24px; }\n"
    "  \n"
    "  .section { padding: 16px; margin-bottom: 16px; }\n"
    "  \n"
    "  .section-header {\n"
    "    flex-direction: column;\n"
    "    align-items: flex-start;\n"
    "  }\n"
    "  \n"
    "  h2 { font-size: 18px; }\n"
    "  \n"
    "  #clients-container { max-height: 400px; }\n"
    "  \n"
    "  table { font-size: 12px; min-width: 600px; }\n"
    "  \n"
    "  th, td { padding: 10px 8px; font-size: 12px; }\n"
    "  \n"
    "  .btn { padding: 6px 12px; font-size: 12px; }\n"
    "  \n"
    "  .log-container { max-height: 300px; font-size: 12px; padding: 12px; }\n"
    "}\n"
    "\n"
    "@media (max-width: 480px) {\n"
    "  body { padding: 8px; }\n"
    "  \n"
    "  h1 { font-size: 20px; }\n"
    "  \n"
    "  .stats-grid { grid-template-columns: 1fr 1fr; gap: 8px; }\n"
    "  \n"
    "  .stat-card { padding: 12px; }\n"
    "  \n"
    "  .stat-value { font-size: 20px; }\n"
    "  \n"
    "  .section { padding: 12px; }\n"
    "  \n"
    "  #clients-container { max-height: 300px; }\n"
    "  \n"
    "  table { min-width: 500px; }\n"
    "  \n"
    "  th, td { padding: 8px 6px; font-size: 11px; }\n"
    "  \n"
    "  .state-badge { font-size: 10px; padding: 4px 8px; }\n"
    "  \n"
    "  .log-container { max-height: 250px; font-size: 11px; }\n"
    "}\n"
    "</style>\n"
    "</head>\n"
    "<body>\n"
    "<header>\n"
    "<div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 16px;\">\n"
    "<h1 data-i18n=\"title\">rtp2httpd Status Dashboard</h1>\n"
    "<div class=\"lang-selector\">\n"
    "<select id=\"lang-select\">\n"
    "<option value=\"en\">English</option>\n"
    "<option value=\"zh-Hans\">简体中文</option>\n"
    "<option value=\"zh-Hant\">繁體中文</option>\n"
    "</select>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"server-info\">\n"
    "<div><span data-i18n=\"version\">Version</span>: " VERSION "</div>\n"
    "<div><span data-i18n=\"uptime\">Uptime</span>: <span id=\"uptime-value\"></span></div>\n"
    "<div><span class=\"connection-status\" id=\"sse-status\"></span><span id=\"sse-text\"></span></div>\n"
    "</div>\n"
    "</header>\n"
    "<div class=\"stats-grid\">\n"
    "<div class=\"stat-card\"><div class=\"stat-label\" data-i18n=\"connected_clients\">Connected Clients</div><div class=\"stat-value\" id=\"total-clients\">0</div></div>\n"
    "<div class=\"stat-card\"><div class=\"stat-label\" data-i18n=\"total_bandwidth\">Total Bandwidth</div><div class=\"stat-value\" id=\"total-bandwidth\">0 bps</div></div>\n"
    "<div class=\"stat-card\"><div class=\"stat-label\" data-i18n=\"total_data_sent\">Total Data Sent</div><div class=\"stat-value\" id=\"total-data\">0 B</div></div>\n"
    "<div class=\"stat-card\"><div class=\"stat-label\" data-i18n=\"max_clients\">Max Clients</div><div class=\"stat-value\" id=\"max-clients\">-</div></div>\n"
    "</div>\n"
    "<div class=\"section\">\n"
    "<div class=\"section-header\"><h2 data-i18n=\"active_connections\">Active Connections</h2><label style=\"display: flex; align-items: center; gap: 8px; cursor: pointer;\"><input type=\"checkbox\" id=\"show-disconnected\" style=\"cursor: pointer;\"> <span data-i18n=\"show_disconnected\">Show Disconnected</span></label></div>\n"
    "<div id=\"clients-container\"><div class=\"empty-state\">&nbsp;</div></div>\n"
    "</div>\n"
    "<div class=\"section\">\n"
    "<div class=\"section-header\"><h2 data-i18n=\"system_logs\">System Logs</h2></div>\n"
    "<div class=\"log-controls\">\n"
    "<label for=\"log-level\" data-i18n=\"log_level\">Log Level:</label>\n"
    "<select id=\"log-level\">\n"
    "<option value=\"0\">FATAL (0)</option>\n"
    "<option value=\"1\">ERROR (1)</option>\n"
    "<option value=\"2\">WARN (2)</option>\n"
    "<option value=\"3\" selected>INFO (3)</option>\n"
    "<option value=\"4\">DEBUG (4)</option>\n"
    "</select>\n"
    "</div>\n"
    "<div class=\"log-container\" id=\"log-container\"></div>\n"
    "</div>\n"
    "<div class=\"section\">\n"
    "<div class=\"section-header\"><h2 data-i18n=\"worker_statistics\">Worker Statistics</h2></div>\n"
    "<div class=\"stats-grid\" style=\"grid-template-columns: repeat(3, 1fr); margin-bottom: 16px;\">\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"buffer_pool_utilization\">Buffer Pool Utilization</div>\n"
    "<div class=\"stat-value\" id=\"pool-utilization\">0%</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span id=\"pool-used\">0</span> / <span id=\"pool-total\">0</span> <span data-i18n=\"buffers\">buffers</span>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"pool_expansions\">Pool Expansions</div>\n"
    "<div class=\"stat-value\" id=\"pool-expansions\">0</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span data-i18n=\"max\">Max</span>: <span id=\"pool-max\">0</span> | <span data-i18n=\"shrinks\">Shrinks</span>: <span id=\"pool-shrinks\">0</span>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"pool_exhaustions\">Pool Exhaustions</div>\n"
    "<div class=\"stat-value\" id=\"pool-exhaustions\" style=\"color: #dc3545;\">0</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span data-i18n=\"free\">Free</span>: <span id=\"pool-free\">0</span> <span data-i18n=\"buffers\">buffers</span>\n"
    "</div>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"stats-grid\" style=\"grid-template-columns: repeat(3, 1fr);\">\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"total_sends\">Total Sends</div>\n"
    "<div class=\"stat-value\" id=\"send-total\">0</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span data-i18n=\"completions\">Completions</span>: <span id=\"send-completions\">0</span><br>\n"
    "<span data-i18n=\"copied\">Copied</span>: <span id=\"send-copied\">0</span>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"send_errors\">Send Errors</div>\n"
    "<div class=\"stat-value\" id=\"send-eagain\">0</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span data-i18n=\"eagain_errors\">EAGAIN errors</span><br>\n"
    "ENOBUFS: <span id=\"send-enobufs\">0</span>\n"
    "</div>\n"
    "</div>\n"
    "<div class=\"stat-card\">\n"
    "<div class=\"stat-label\" data-i18n=\"batching\">Batching</div>\n"
    "<div class=\"stat-value\" id=\"send-batch\">0</div>\n"
    "<div style=\"font-size: 12px; color: var(--text-muted); margin-top: 8px;\">\n"
    "<span data-i18n=\"batch_sends\">Batch sends</span><br>\n"
    "<span data-i18n=\"timeouts\">Timeouts</span>: <span id=\"send-timeout-flush\">0</span>\n"
    "</div>\n"
    "</div>\n"
    "</div>\n"
    "</div>\n"
    "<script>\n"
    "/* Multi-language support */\n"
    "const translations = {\n"
    "  en: {\n"
    "    title: 'rtp2httpd Status Dashboard',\n"
    "    version: 'Version',\n"
    "    uptime: 'Uptime',\n"
    "    connected: 'Connected',\n"
    "    disconnected: 'Disconnected',\n"
    "    connected_clients: 'Connected Clients',\n"
    "    total_bandwidth: 'Total Bandwidth',\n"
    "    total_data_sent: 'Total Data Sent',\n"
    "    max_clients: 'Max Clients',\n"
    "    active_connections: 'Active Connections',\n"
    "    show_disconnected: 'Show Disconnected',\n"
    "    system_logs: 'System Logs',\n"
    "    log_level: 'Log Level:',\n"
    "    worker_statistics: 'Worker Statistics',\n"
    "    buffer_pool_utilization: 'Buffer Pool Utilization',\n"
    "    buffers: 'buffers',\n"
    "    pool_expansions: 'Pool Expansions',\n"
    "    max: 'Max',\n"
    "    shrinks: 'Shrinks',\n"
    "    pool_exhaustions: 'Pool Exhaustions',\n"
    "    free: 'Free',\n"
    "    total_sends: 'Total Sends',\n"
    "    completions: 'Completions',\n"
    "    copied: 'Copied',\n"
    "    send_errors: 'Send Errors',\n"
    "    eagain_errors: 'EAGAIN errors',\n"
    "    batching: 'Batching',\n"
    "    batch_sends: 'Batch sends',\n"
    "    timeouts: 'Timeouts',\n"
    "    client: 'Client',\n"
    "    service: 'Service',\n"
    "    state: 'State',\n"
    "    duration: 'Duration',\n"
    "    bandwidth: 'Bandwidth',\n"
    "    data_sent: 'Data Sent',\n"
    "    action: 'Action',\n"
    "    disconnect: 'Disconnect',\n"
    "    no_connections: 'No connections',\n"
    "    disconnect_confirm: 'Disconnect client',\n"
    "    worker_pid: 'Worker PID'\n"
    "  },\n"
    "  'zh-Hans': {\n"
    "    title: 'rtp2httpd 状态面板',\n"
    "    version: '版本',\n"
    "    uptime: '运行时间',\n"
    "    connected: '已连接',\n"
    "    disconnected: '已断开',\n"
    "    connected_clients: '已连接客户端',\n"
    "    total_bandwidth: '总带宽',\n"
    "    total_data_sent: '总发送数据',\n"
    "    max_clients: '最大客户端数',\n"
    "    active_connections: '活动连接',\n"
    "    show_disconnected: '显示已断开连接',\n"
    "    system_logs: '系统日志',\n"
    "    log_level: '日志级别：',\n"
    "    worker_statistics: '工作进程统计',\n"
    "    buffer_pool_utilization: '缓冲池利用率',\n"
    "    buffers: '缓冲区',\n"
    "    pool_expansions: '池扩展次数',\n"
    "    max: '最大',\n"
    "    shrinks: '收缩',\n"
    "    pool_exhaustions: '池耗尽次数',\n"
    "    free: '空闲',\n"
    "    total_sends: '总发送次数',\n"
    "    completions: '完成',\n"
    "    copied: '已复制',\n"
    "    send_errors: '发送错误',\n"
    "    eagain_errors: 'EAGAIN 错误',\n"
    "    batching: '批处理',\n"
    "    batch_sends: '批量发送',\n"
    "    timeouts: '超时',\n"
    "    client: '客户端',\n"
    "    service: '服务',\n"
    "    state: '状态',\n"
    "    duration: '持续时间',\n"
    "    bandwidth: '带宽',\n"
    "    data_sent: '已发送数据',\n"
    "    action: '操作',\n"
    "    disconnect: '断开连接',\n"
    "    no_connections: '无连接',\n"
    "    disconnect_confirm: '断开客户端',\n"
    "    worker_pid: '工作进程 PID'\n"
    "  },\n"
    "  'zh-Hant': {\n"
    "    title: 'rtp2httpd 狀態面板',\n"
    "    version: '版本',\n"
    "    uptime: '運行時間',\n"
    "    connected: '已連接',\n"
    "    disconnected: '已斷開',\n"
    "    connected_clients: '已連接客戶端',\n"
    "    total_bandwidth: '總帶寬',\n"
    "    total_data_sent: '總發送數據',\n"
    "    max_clients: '最大客戶端數',\n"
    "    active_connections: '活動連接',\n"
    "    show_disconnected: '顯示已斷開連接',\n"
    "    system_logs: '系統日誌',\n"
    "    log_level: '日誌級別：',\n"
    "    worker_statistics: '工作進程統計',\n"
    "    buffer_pool_utilization: '緩衝池利用率',\n"
    "    buffers: '緩衝區',\n"
    "    pool_expansions: '池擴展次數',\n"
    "    max: '最大',\n"
    "    shrinks: '收縮',\n"
    "    pool_exhaustions: '池耗盡次數',\n"
    "    free: '空閒',\n"
    "    total_sends: '總發送次數',\n"
    "    completions: '完成',\n"
    "    copied: '已複製',\n"
    "    send_errors: '發送錯誤',\n"
    "    eagain_errors: 'EAGAIN 錯誤',\n"
    "    batching: '批處理',\n"
    "    batch_sends: '批量發送',\n"
    "    timeouts: '超時',\n"
    "    client: '客戶端',\n"
    "    service: '服務',\n"
    "    state: '狀態',\n"
    "    duration: '持續時間',\n"
    "    bandwidth: '帶寬',\n"
    "    data_sent: '已發送數據',\n"
    "    action: '操作',\n"
    "    disconnect: '斷開連接',\n"
    "    no_connections: '無連接',\n"
    "    disconnect_confirm: '斷開客戶端',\n"
    "    worker_pid: '工作進程 PID'\n"
    "  }\n"
    "};\n"
    "\n"
    "let currentLang = 'en';\n"
    "\n"
    "function detectBrowserLanguage() {\n"
    "  const browserLang = navigator.language || navigator.userLanguage;\n"
    "  if (browserLang.startsWith('zh')) {\n"
    "    if (browserLang.includes('TW') || browserLang.includes('HK') || browserLang.includes('Hant')) {\n"
    "      return 'zh-Hant';\n"
    "    }\n"
    "    return 'zh-Hans';\n"
    "  }\n"
    "  return 'en';\n"
    "}\n"
    "\n"
    "function applyTranslations(lang) {\n"
    "  currentLang = lang;\n"
    "  const t = translations[lang] || translations.en;\n"
    "  document.querySelectorAll('[data-i18n]').forEach(el => {\n"
    "    const key = el.getAttribute('data-i18n');\n"
    "    if (t[key]) {\n"
    "      el.textContent = t[key];\n"
    "    }\n"
    "  });\n"
    "  localStorage.setItem('rtp2httpd-lang', lang);\n"
    "}\n"
    "\n"
    "function initLanguage() {\n"
    "  const savedLang = localStorage.getItem('rtp2httpd-lang');\n"
    "  const lang = savedLang || detectBrowserLanguage();\n"
    "  document.getElementById('lang-select').value = lang;\n"
    "  applyTranslations(lang);\n"
    "}\n"
    "\n"
    "function t(key) {\n"
    "  return translations[currentLang][key] || translations.en[key] || key;\n"
    "}\n"
    "\n"
    "let eventSource = null;\n"
    "let serverStartTime = 0;\n"
    "let allSeenClients = new Map();\n"
    "let showDisconnected = false;\n"
    "let lastActiveClients = [];\n"
    "function getClientKey(c) {\n"
    "  return c.client_addr + ':' + c.client_port + ':' + c.connect_time;\n"
    "}\n"
    "function formatBytes(bytes) {\n"
    "  if (bytes >= 1073741824) return (bytes / 1073741824).toFixed(2) + ' GB';\n"
    "  if (bytes >= 1048576) return (bytes / 1048576).toFixed(2) + ' MB';\n"
    "  if (bytes >= 1024) return (bytes / 1024).toFixed(2) + ' KB';\n"
    "  return bytes + ' B';\n"
    "}\n"
    "function formatBandwidth(bytesPerSec) {\n"
    "  const bps = bytesPerSec * 8; // convert Bytes/s to bits/s\n"
    "  if (bps >= 1000000) return (bps / 1000000).toFixed(2) + ' Mbps';\n"
    "  if (bps >= 1000) return (bps / 1000).toFixed(2) + ' Kbps';\n"
    "  return bps + ' bps';\n"
    "}\n"
    "function formatDuration(milliseconds) {\n"
    "  const seconds = Math.floor(milliseconds / 1000);\n"
    "  const d = Math.floor(seconds / 86400);\n"
    "  const h = Math.floor((seconds % 86400) / 3600);\n"
    "  const m = Math.floor((seconds % 3600) / 60);\n"
    "  const s = seconds % 60;\n"
    "  let result = '';\n"
    "  if (d > 0) result += d + 'd ';\n"
    "  if (h > 0 || d > 0) result += h + 'h ';\n"
    "  if (m > 0 || h > 0 || d > 0) result += m + 'm ';\n"
    "  result += s + 's';\n"
    "  return result;\n"
    "}\n"
    "function getStateBadgeClass(state) {\n"
    "  if (state.includes('Disconnected')) return 'state-disconnected';\n"
    "  if (state.includes('FCC')) return 'state-fcc';\n"
    "  if (state.includes('RTSP')) return 'state-rtsp';\n"
    "  if (state.includes('ACTIVE') || state.includes('PLAYING')) return 'state-active';\n"
    "  if (state.includes('ERROR')) return 'state-error';\n"
    "  return 'state-connecting';\n"
    "}\n"

    "function disconnectClient(clientId) {\n"
    "  if (!confirm(t('disconnect_confirm') + ' ' + clientId + '?')) return;\n"
    "  fetch('/api/disconnect', {\n"
    "    method: 'POST',\n"
    "    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n"
    "    body: 'client_id=' + clientId\n"
    "  })\n"
    "    .then(r => r.json())\n"
    "    .then(data => { if (!data.success) alert('Error: ' + data.error); })\n"
    "    .catch(e => alert('Failed to disconnect client: ' + e));\n"
    "}\n"
    "function updateClients(clients) {\n"
    "  lastActiveClients = clients;\n"
    "  const activeClientKeys = new Set();\n"
    "  clients.forEach(c => {\n"
    "    const key = getClientKey(c);\n"
    "    activeClientKeys.add(key);\n"
    "    allSeenClients.set(key, {...c, isDisconnected: false});\n"
    "  });\n"
    "  allSeenClients.forEach((c, clientKey) => {\n"
    "    if (!activeClientKeys.has(clientKey)) {\n"
    "      c.isDisconnected = true;\n"
    "      if (!c.disconnect_duration_ms) c.disconnect_duration_ms = c.duration_ms;\n"
    "      c.state_desc = 'Disconnected';\n"
    "      c.current_bandwidth = 0;\n"
    "    }\n"
    "  });\n"
    "  const container = document.getElementById('clients-container');\n"
    "  let allClients = Array.from(allSeenClients.values());\n"
    "  if (!showDisconnected) {\n"
    "    allClients = allClients.filter(c => !c.isDisconnected);\n"
    "  }\n"
    "  if (allClients.length === 0) {\n"
    "    container.innerHTML = '<div class=\"empty-state\">' + t('no_connections') + '</div>';\n"
    "    return;\n"
    "  }\n"
    "  let html = '<table><thead><tr><th>' + t('client') + '</th><th>' + t('service') + '</th><th>' + t('state') + '</th><th>' + t('duration') + '</th><th>' + t('bandwidth') + '</th><th>' + t('data_sent') + '</th><th>' + t('action') + '</th></tr></thead><tbody>';\n"

    "  allClients.forEach((c, idx) => {\n"
    "    const duration = c.isDisconnected ? (c.disconnect_duration_ms || 0) : (c.duration_ms || 0);\n"
    "    const rowClass = c.isDisconnected ? ' class=\"client-row-disconnected\"' : '';\n"
    "    html += '<tr' + rowClass + '>';\n"
    "    html += '<td>' + c.client_addr + ':' + c.client_port + '<br><small style=\"color:#999\">' + t('worker_pid') + ': ' + c.worker_pid + '</small></td>';\n"
    "    html += '<td>' + (c.service_url || '-') + '</td>';\n"
    "    html += '<td><span class=\"state-badge ' + getStateBadgeClass(c.state_desc) + '\">' + c.state_desc + '</span></td>';\n"
    "    html += '<td>' + formatDuration(duration) + '</td>';\n"
    "    html += '<td>' + formatBandwidth(c.current_bandwidth) + '</td>';\n"

    "    html += '<td>' + formatBytes(c.bytes_sent) + '</td>';\n"
    "    if (c.isDisconnected) {\n"
    "      html += '<td>-</td>';\n"
    "    } else {\n"
    "      html += '<td><button class=\"btn btn-danger\" onclick=\"disconnectClient(' + c.client_id + ')\">' + t('disconnect') + '</button></td>';\n"
    "    }\n"
    "    html += '</tr>';\n"
    "  });\n"
    "  html += '</tbody></table>';\n"
    "  container.innerHTML = html;\n"

    "}\n"
    "function updateLogs(logs, mode) {\n"
    "  const container = document.getElementById('log-container');\n"
    "  if (!logs || logs.length === 0) return;\n"
    "  const MAX_LOG_ENTRIES = 1000;\n"
    "  const wasAtBottom = container.scrollHeight - container.scrollTop <= container.clientHeight + 50;\n"
    "  const fragment = document.createDocumentFragment();\n"
    "  logs.forEach(log => {\n"
    "    const date = new Date(log.timestamp);\n"
    "    const time = date.toLocaleTimeString();\n"
    "    const levelClass = 'log-' + log.level_name.toLowerCase();\n"
    "    const entry = document.createElement('div');\n"
    "    entry.className = 'log-entry';\n"
    "    entry.innerHTML = '<span class=\"log-timestamp\">' + time + '</span><span class=\"log-level ' + levelClass + '\">[' + log.level_name + ']</span>' + log.message;\n"
    "    fragment.appendChild(entry);\n"
    "  });\n"
    "  if (mode === 'full') {\n"
    "    container.innerHTML = '';\n"
    "  }\n"
    "  container.appendChild(fragment);\n"
    "  const entries = container.children;\n"
    "  if (entries.length > MAX_LOG_ENTRIES) {\n"
    "    const toRemove = entries.length - MAX_LOG_ENTRIES;\n"
    "    for (let i = 0; i < toRemove; i++) {\n"
    "      entries[0].remove();\n"
    "    }\n"
    "  }\n"
    "  if (wasAtBottom) {\n"
    "    container.scrollTop = container.scrollHeight;\n"
    "  }\n"
    "}\n"
    "function connectSSE() {\n"
    "  eventSource = new EventSource('/status/sse');\n"
    "  eventSource.onopen = () => {\n"
    "    document.getElementById('sse-status').className = 'connection-status connected';\n"
    "    document.getElementById('sse-text').textContent = t('connected');\n"
    "  };\n"
    "  eventSource.onerror = () => {\n"
    "    document.getElementById('sse-status').className = 'connection-status disconnected';\n"
    "    document.getElementById('sse-text').textContent = t('disconnected');\n"
    "    eventSource.close();\n"
    "    setTimeout(connectSSE, 5000);\n"
    "  };\n"
    "  eventSource.onmessage = (e) => {\n"
    "    const data = JSON.parse(e.data);\n"
    "    document.getElementById('total-clients').textContent = data.total_clients;\n"
    "    document.getElementById('total-bandwidth').textContent = formatBandwidth(data.total_bandwidth);\n"
    "    document.getElementById('total-data').textContent = formatBytes(data.total_bytes_sent);\n"
    "    document.getElementById('max-clients').textContent = data.max_clients;\n"
    "    if (serverStartTime === 0) serverStartTime = data.server_start_time;\n"
    "    document.getElementById('uptime-value').textContent = formatDuration(data.uptime_ms);\n"
    "    document.getElementById('log-level').value = data.current_log_level;\n"
    "    if (data.pool) {\n"
    "      const pool = data.pool;\n"
    "      document.getElementById('pool-utilization').textContent = pool.utilization.toFixed(1) + '%';\n"
    "      document.getElementById('pool-used').textContent = pool.used;\n"
    "      document.getElementById('pool-total').textContent = pool.total;\n"
    "      document.getElementById('pool-free').textContent = pool.free;\n"
    "      document.getElementById('pool-max').textContent = pool.max;\n"
    "      document.getElementById('pool-expansions').textContent = pool.expansions;\n"
    "      document.getElementById('pool-shrinks').textContent = pool.shrinks || 0;\n"
    "      const exhaustEl = document.getElementById('pool-exhaustions');\n"
    "      exhaustEl.textContent = pool.exhaustions;\n"
    "      exhaustEl.style.color = pool.exhaustions > 0 ? '#dc3545' : '#28a745';\n"
    "    }\n"
    "    if (data.send) {\n"
    "      const send = data.send;\n"
    "      document.getElementById('send-total').textContent = send.total.toLocaleString();\n"
    "      document.getElementById('send-completions').textContent = send.completions.toLocaleString();\n"
    "      document.getElementById('send-copied').textContent = send.copied.toLocaleString();\n"
    "      document.getElementById('send-eagain').textContent = send.eagain.toLocaleString();\n"
    "      document.getElementById('send-enobufs').textContent = send.enobufs.toLocaleString();\n"
    "      document.getElementById('send-batch').textContent = send.batch.toLocaleString();\n"
    "      document.getElementById('send-timeout-flush').textContent = send.timeout_flush.toLocaleString();\n"
    "    }\n"
    "    updateClients(data.clients);\n"
    "    updateLogs(data.logs, data.logs_mode);\n"
    "  };\n"
    "}\n"
    "document.getElementById('log-level').addEventListener('change', (e) => {\n"
    "  fetch('/api/loglevel', {\n"
    "    method: 'PUT',\n"
    "    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n"
    "    body: 'level=' + e.target.value\n"
    "  })\n"
    "    .then(r => r.json())\n"
    "    .then(data => { if (!data.success) alert('Error: ' + data.error); })\n"
    "    .catch(e => alert('Failed to change log level: ' + e));\n"
    "});\n"
    "document.getElementById('show-disconnected').addEventListener('change', (e) => {\n"
    "  showDisconnected = e.target.checked;\n"
    "  updateClients(lastActiveClients);\n"
    "});\n"
    "document.getElementById('lang-select').addEventListener('change', (e) => {\n"
    "  applyTranslations(e.target.value);\n"
    "  updateClients(lastActiveClients);\n"
    "});\n"
    "initLanguage();\n"
    "connectSSE();\n"
    "</script>\n"
    "</body>\n"
    "</html>\n";

#endif /* __STATUS_PAGE_H__ */
